buildscript {
    ext {
        restdocsApiSpecVersion = '0.19.2'
        profile = (!project.hasProperty('profile') || !profile) ? 'none' : profile
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
    id 'org.hidetake.swagger.generator' version '2.19.2'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testRuntimeOnly 'com.h2database:h2'

    // docker compose
    if ("${profile}" != 'dev') {
        runtimeOnly 'org.springframework.boot:spring-boot-docker-compose'
    }

    // swagger
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"
    testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"
    swaggerUI 'org.webjars:swagger-ui:5.15.1'

    // production
    implementation 'com.google.cloud:spring-cloud-gcp-starter-sql-mysql:6.2.3'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // embedded redis
    implementation 'com.github.codemonstur:embedded-redis:1.4.3'

    // redisson
    implementation 'org.redisson:redisson:3.50.0'

    // logging
    if ("${profile}" == 'prod') {
        implementation 'org.springframework.cloud:spring-cloud-gcp-starter-logging'
        implementation 'org.springframework.cloud:spring-cloud-gcp-starter-trace'
    }
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// === querydsl start ===

def qClassDir = 'src/main/generated'

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(qClassDir))
}

sourceSets {
    main {
        java {
            srcDirs += [qClassDir]
        }
    }
}

tasks.register('cleanQClass', Delete) {
    delete file(qClassDir)
}

// Deletes and regenerates all QueryDSL Q-classes.
tasks.register('regenerateQClasses') {
    group = 'build'
    description = 'Deletes and regenerates all QueryDSL Q-classes.'
    dependsOn 'cleanQClass', 'compileJava'
}

tasks.named('compileJava') {
    mustRunAfter 'cleanQClass'
}

clean {
    delete file(qClassDir)
}

// === querydsl end ===

// === swagger start ===

openapi3 {
    server = "http://localhost:8080"
    title = "share:v API"
    description = "share:v API description"
    version = "0.1.0"
    format = "json"
}

swaggerSources {
    sample {
        setInputFile(file("${openapi3.outputDirectory}/openapi3.json"))
    }
}

tasks.register("copySwaggerUISample") {
    doLast {
        def destinationDir

        if ("${profile}" == 'dev') {
            destinationDir = "${layout.buildDirectory.dir("resources/main/static/docs/").get()}"
        } else {
            destinationDir = "src/main/resources/static/docs/"
        }

        copy {
            from("${generateSwaggerUISample.outputDir}")
            into(destinationDir)
        }
    }
}

tasks.withType(GenerateSwaggerUI).configureEach {
    dependsOn "openapi3"
    finalizedBy copySwaggerUISample
}

bootJar {
    if ("${profile}" != 'prod') {
        dependsOn generateSwaggerUISample
    }
}

clean {
    delete file("src/main/resources/static/docs/")
}

// === swagger end ===
